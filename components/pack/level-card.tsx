import type { LevelProgress, PackLevel } from '@/lib/types';
import { getDifficultyEmoji, getQuestionTypeEmoji } from '@/utils';
import { Link } from 'expo-router';
import { Pressable, Text, View } from 'react-native';

interface LevelCardProps {
  level: PackLevel;
  progress: LevelProgress;
  isUnlocked: boolean;
  packId: string;
}

export function LevelCard({ level, progress, isUnlocked, packId }: LevelCardProps) {
  const levelStr = encodeURIComponent(JSON.stringify(level.config));
  const isCompleted = progress.stars === 3;
  const isLivesMode = level.gameMode === 'lives';

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–∞
  const modeColor = isLivesMode ? '#FF5252' : '#2196F3';
  const modeColorLight = isLivesMode ? '#FFEBEE' : '#E3F2FD';
  const modeName = isLivesMode ? '–ù–∞ –∂–∏–∑–Ω–∏' : '–ù–∞ –≤—Ä–µ–º—è';

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const getDifficultyInfo = () => {
    if (level.distractorMode === 'easy') return { text: '–õ–µ–≥–∫–æ', color: '#4CAF50' };
    if (level.distractorMode === 'hard') return { text: '–°–ª–æ–∂–Ω–æ', color: '#FF5252' };
    return { text: '–°—Ä–µ–¥–Ω–µ', color: '#FF9800' };
  };
  const difficulty = getDifficultyInfo();

  const content = (
    <View
      style={{
        borderRadius: 16,
        borderWidth: 2,
        borderColor: isCompleted ? '#FFD700' : isUnlocked ? modeColor : '#999',
        backgroundColor: isCompleted ? '#FFFBEA' : isUnlocked ? '#FFFFFF' : '#F5F5F5',
        opacity: isUnlocked ? 1 : 0.7,
        overflow: 'hidden',
      }}
    >
      {/* –¶–≤–µ—Ç–Ω–∞—è –ø–æ–ª–æ—Å–∫–∞ —Å–≤–µ—Ä—Ö—É */}
      <View
        style={{
          height: 6,
          backgroundColor: isCompleted ? '#FFD700' : modeColor,
        }}
      />

      <View style={{ padding: 16, gap: 14 }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–µ–∂–∏–º–æ–º */}
        <View style={{ gap: 8 }}>
          <View style={{ flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between' }}>
            {/* –†–µ–∂–∏–º –∏–≥—Ä—ã */}
            <View
              style={{
                flexDirection: 'row',
                alignItems: 'center',
                gap: 6,
                backgroundColor: modeColorLight,
                paddingHorizontal: 10,
                paddingVertical: 4,
                borderRadius: 12,
              }}
            >
              <Text style={{ fontSize: 14 }}>{isLivesMode ? '‚ù§Ô∏è' : '‚è±Ô∏è'}</Text>
              <Text style={{ fontSize: 12, fontWeight: '600', color: modeColor }}>
                {modeName}
              </Text>
            </View>

            {/* –ó–≤—ë–∑–¥—ã */}
            {isUnlocked && progress.attempts > 0 && (
              <View style={{ flexDirection: 'row', gap: 2 }}>
                {Array.from({ length: 3 }, (_, i) => (
                  <Text key={i} style={{ fontSize: 22, color: i < progress.stars ? '#FFD700' : '#E0E0E0' }}>
                    ‚òÖ
                  </Text>
                ))}
              </View>
            )}
          </View>

          {/* –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è */}
          <Text
            style={{
              fontSize: 18,
              fontWeight: '700',
              color: isUnlocked ? '#000' : '#999',
              lineHeight: 24,
            }}
            numberOfLines={2}
          >
            {level.title}
          </Text>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <Text
            style={{
              fontSize: 13,
              color: isUnlocked ? '#666' : '#999',
              lineHeight: 18,
            }}
            numberOfLines={2}
          >
            {level.description}
          </Text>
        </View>

        {/* –°–ª–æ–∂–Ω–æ—Å—Ç—å */}
        <View
          style={{
            flexDirection: 'row',
            alignItems: 'center',
            gap: 6,
            backgroundColor: `${difficulty.color}15`,
            paddingHorizontal: 12,
            paddingVertical: 6,
            borderRadius: 8,
            alignSelf: 'flex-start',
          }}
        >
          <Text style={{ fontSize: 14 }}>{getDifficultyEmoji(level.distractorMode)}</Text>
          <Text style={{ fontSize: 13, fontWeight: '600', color: difficulty.color }}>
            –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty.text}
          </Text>
        </View>

        {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Ä–æ–≤–Ω—è */}
        <View
          style={{
            flexDirection: 'row',
            gap: 8,
            flexWrap: 'wrap',
            paddingTop: 8,
            borderTopWidth: 1,
            borderTopColor: '#F0F0F0',
          }}
        >
          {/* –í—Ä–µ–º—è/–ñ–∏–∑–Ω–∏ */}
          {isLivesMode ? (
            <View
              style={{
                flexDirection: 'row',
                alignItems: 'center',
                gap: 4,
                backgroundColor: '#FFF3E0',
                paddingHorizontal: 10,
                paddingVertical: 6,
                borderRadius: 8,
              }}
            >
              <Text style={{ fontSize: 16 }}>‚ù§Ô∏è</Text>
              <Text style={{ fontSize: 12, fontWeight: '600', color: '#E65100' }}>
                {level.config.lives} –∂–∏–∑–Ω–µ–π
              </Text>
            </View>
          ) : (
            <View
              style={{
                flexDirection: 'row',
                alignItems: 'center',
                gap: 4,
                backgroundColor: '#E3F2FD',
                paddingHorizontal: 10,
                paddingVertical: 6,
                borderRadius: 8,
              }}
            >
              <Text style={{ fontSize: 16 }}>‚è±Ô∏è</Text>
              <Text style={{ fontSize: 12, fontWeight: '600', color: '#1565C0' }}>
                {level.config.durationSec} —Å–µ–∫—É–Ω–¥
              </Text>
            </View>
          )}

          {/* –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ */}
          <View
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              gap: 4,
              backgroundColor: '#F3E5F5',
              paddingHorizontal: 10,
              paddingVertical: 6,
              borderRadius: 8,
            }}
          >
            <Text style={{ fontSize: 16 }}>üéØ</Text>
            <Text style={{ fontSize: 12, fontWeight: '600', color: '#6A1B9A' }}>
              {level.config.lanes} –≤–∞—Ä–∏–∞–Ω—Ç–∞
            </Text>
          </View>

          {/* –¢–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤ */}
          <View
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              gap: 4,
              backgroundColor: '#E8F5E9',
              paddingHorizontal: 10,
              paddingVertical: 6,
              borderRadius: 8,
              flex: 1,
              minWidth: 120,
            }}
          >
            <Text style={{ fontSize: 16 }}>{getQuestionTypeEmoji(level.config.allowedTypes)}</Text>
            <Text style={{ fontSize: 12, fontWeight: '600', color: '#2E7D32' }} numberOfLines={1}>
              {level.config.allowedTypes.map(t => {
                if (t === 'meaning') return '–ü–µ—Ä–µ–≤–æ–¥';
                if (t === 'form') return '–§–æ—Ä–º—ã';
                if (t === 'anagram') return '–ê–Ω–∞–≥—Ä–∞–º–º—ã';
                if (t === 'context') return '–ö–æ–Ω—Ç–µ–∫—Å—Ç';
                return t;
              }).join(', ')}
            </Text>
          </View>
        </View>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ */}
        {isUnlocked && progress.attempts > 0 && (
          <View
            style={{
              backgroundColor: '#F5F5F5',
              padding: 10,
              borderRadius: 8,
              gap: 4,
            }}
          >
            <Text style={{ fontSize: 11, fontWeight: '600', color: '#666', textTransform: 'uppercase' }}>
              üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            </Text>
            <View style={{ flexDirection: 'row', flexWrap: 'wrap', gap: 12 }}>
              <Text style={{ fontSize: 12, color: '#333' }}>
                –ü–æ–ø—ã—Ç–æ–∫: <Text style={{ fontWeight: '600' }}>{progress.attempts}</Text>
              </Text>
              <Text style={{ fontSize: 12, color: '#333' }}>
                –†–µ–∫–æ—Ä–¥: <Text style={{ fontWeight: '600' }}>{progress.bestScore}</Text>
              </Text>
              <Text style={{ fontSize: 12, color: '#333' }}>
                –¢–æ—á–Ω–æ—Å—Ç—å: <Text style={{ fontWeight: '600' }}>{Math.round(progress.bestAccuracy * 100)}%</Text>
              </Text>
            </View>
          </View>
        )}

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ */}
        {!isUnlocked && (
          <View
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              gap: 10,
              backgroundColor: '#FFF3E0',
              padding: 12,
              borderRadius: 8,
            }}
          >
            <Text style={{ fontSize: 20 }}>üîí</Text>
            <Text style={{ fontSize: 12, color: '#E65100', flex: 1, lineHeight: 16 }} numberOfLines={2}>
              –¢—Ä–µ–±—É–µ—Ç—Å—è <Text style={{ fontWeight: '700' }}>{level.unlockRequirement.minStars}‚òÖ</Text> –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —É—Ä–æ–≤–Ω–µ
            </Text>
          </View>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å" –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π */}
        {isUnlocked && (
          <View
            style={{
              backgroundColor: modeColor,
              paddingVertical: 12,
              borderRadius: 10,
              alignItems: 'center',
            }}
          >
            <Text style={{ fontSize: 15, fontWeight: '700', color: '#FFF' }}>
              {progress.attempts > 0 ? 'üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞' : '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å'}
            </Text>
          </View>
        )}
      </View>
    </View>
  );

  if (!isUnlocked) {
    return content;
  }

  return (
    <Link
      href={{
        pathname: '/game/run',
        params: {
          packId,
          levelId: level.id,
          level: levelStr,
          seed: `${packId}-${level.id}-${Date.now()}`,
          mode: 'normal',
          distractorMode: level.distractorMode,
        },
      }}
      asChild
    >
      <Pressable>{content}</Pressable>
    </Link>
  );
}
