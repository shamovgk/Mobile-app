import { ThemedText } from '@/components/themed-text';
import { ThemedView } from '@/components/themed-view';
import { getPackById } from '@/lib/content';
import { buildSessionPlan } from '@/lib/engine';
import { mulberry32, shuffleInPlace } from '@/lib/random';
import { applyAnswer, defaultScore } from '@/lib/scoring';
import { sfxDispose, sfxFail, sfxInit, sfxOk } from '@/lib/sfx';
import type { LevelConfig, RunSummary } from '@/lib/types';
import { useLocalSearchParams, useNavigation, useRouter } from 'expo-router';
import { useEffect, useMemo, useRef, useState } from 'react';
import { Animated, AppState, BackHandler, Modal, Pressable, Text, View } from 'react-native';

const STUN_MS = 2000;
const BONUS_PER_SEC = 50;

export default function RunScreen() {
  const { packId, level, seed, mode, repeat, distractorMode } = useLocalSearchParams<{
    packId: string;
    level: string;
    seed?: string;
    mode?: 'normal' | 'review';
    repeat?: string; // URI-encoded JSON: string[]
    distractorMode?: 'easy' | 'normal' | 'hard';
  }>();
  const router = useRouter();
  const navigation = useNavigation();

  const levelConfig: LevelConfig = useMemo(() => {
    try { return JSON.parse(decodeURIComponent(level ?? '')) as LevelConfig; }
    catch { return { durationSec: 60, forkEverySec: 2.5, lanes: 2, allowedTypes: ['meaning'], lives: 3 }; }
  }, [level]);

  const pack = getPackById((packId as string) ?? 'pack-basic-1')!;
  const sessionSeed = (seed as string) ?? `${pack.id}-seed-default`;
  const isReviewMode = mode === 'review';

  // repeatSet (–¥–ª—è ¬´–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏¬ª)
  const repeatSet: string[] | null = useMemo(() => {
    if (!repeat) return null;
    try { return JSON.parse(decodeURIComponent(repeat)) as string[]; }
    catch { return null; }
  }, [repeat]);

  // –í —Ä–µ–∂–∏–º–µ review –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é —Å–µ—Å—Å–∏—é ‚Äî –Ω–æ –æ—Ç–¥–∞—ë–º –∫–æ–Ω—Ç—Ä–æ–ª—å Duration —ç–∫—Ä–∞–Ω—É Result.
  const effectiveLevel: LevelConfig = useMemo(() => {
    if (isReviewMode && repeatSet && repeatSet.length > 0) {
      const suggested = Math.min(60, Math.max(15, repeatSet.length * 5));
      return { ...levelConfig, durationSec: suggested };
    }
    return levelConfig;
  }, [isReviewMode, repeatSet, levelConfig]);

  // –ü–ª–∞–Ω: –æ–±—ã—á–Ω—ã–π ‚Äî –≤—Å–µ —Å–ª–æ–≤–∞; review ‚Äî —Ç–æ–ª—å–∫–æ –∏–∑ repeatSet
  const plan = useMemo(
    () => buildSessionPlan({
      pack,
      level: effectiveLevel,
      seed: sessionSeed,
      restrictLexemes: (isReviewMode && repeatSet && repeatSet.length > 0) ? repeatSet : undefined,
      distractorMode: (distractorMode as 'easy'|'normal'|'hard') ?? 'normal', // üîπ —É—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
    }),
    [pack, effectiveLevel, sessionSeed, isReviewMode, repeatSet, distractorMode]
  );

  // HUD/—Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [scoreState, setScoreState] = useState(() => defaultScore());
  const scoreRef = useRef(scoreState);
  useEffect(() => { scoreRef.current = scoreState; }, [scoreState]);

  // –º–∞–∫—Å–∏–º—É–º –∫–æ–º–±–æ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
  const comboMaxRef = useRef<number>(0);
  useEffect(() => {
    if (scoreState.combo > comboMaxRef.current) comboMaxRef.current = scoreState.combo;
  }, [scoreState.combo]);

  const [timerLeft, setTimerLeft] = useState(effectiveLevel.durationSec);
  const sessionActiveRef = useRef(true);
  const [isPaused, setPaused] = useState(false);
  const [slotIdx, _setSlotIdx] = useState(0);
  const slotIdxRef = useRef(0);
  const setSlotIdx = (v: number | ((n: number) => number)) => {
    _setSlotIdx(prev => {
      const next = typeof v === 'function' ? (v as any)(prev) : v;
      slotIdxRef.current = next;
      // –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–ª–æ–≤–∞ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
      attemptsForCurrentRef.current = 0;
      return next;
    });
  };

  // –¢–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ + —è–≤–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
  const [options, setOptions] = useState(() => plan.slots[0]?.options ?? []);
  const [highlight, setHighlight] = useState<{ index: number; correct: boolean } | null>(null);

  useEffect(() => {
    const next = plan.slots[Math.min(slotIdx, plan.slots.length - 1)]?.options ?? [];
    setOptions([...next]);
    setHighlight(null);
  }, [slotIdx, plan.slots]);

  // –û–≥–ª—É—à–µ–Ω–∏–µ
  const stunnedUntilRef = useRef<number>(0);
  const [stunLeft, setStunLeft] = useState(0);

  // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  const cardOpacity = useRef(new Animated.Value(1)).current;

  // –ê—É–¥–∏–æ/–≤–∏–±—Ä–æ
  useEffect(() => { sfxInit(); return () => { sfxDispose(); }; }, []);

  // –ó–∞–ø—Ä–µ—Ç –≤—ã—Ö–æ–¥–∞
  useEffect(() => {
    const backSub = BackHandler.addEventListener('hardwareBackPress', () => { setPaused(true); return true; });
    const beforeRemove = navigation.addListener('beforeRemove', (e) => { if (!sessionActiveRef.current) return; e.preventDefault(); setPaused(true); });
    return () => { backSub.remove(); beforeRemove(); };
  }, [navigation]);

  // –ê–≤—Ç–æ–ø–∞—É–∑–∞
  useEffect(() => {
    const sub = AppState.addEventListener('change', (s) => { if (s === 'background' || s === 'inactive') setPaused(true); });
    return () => sub.remove();
  }, []);

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä: —Ñ–∏–∫—Å. —Å—Ç–∞—Ä—Ç + —É—á—ë—Ç –ø–∞—É–∑ (–ù–ï –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Ç–≤–µ—Ç–æ–≤)
  const startRef = useRef<number>(Date.now());
  const pausedAccumRef = useRef<number>(0);
  const pauseStartRef = useRef<number | null>(null);
  const durationMs = effectiveLevel.durationSec * 1000;

  useEffect(() => {
    const now = Date.now();
    if (isPaused) {
      if (pauseStartRef.current == null) pauseStartRef.current = now;
    } else {
      if (pauseStartRef.current != null) {
        pausedAccumRef.current += now - pauseStartRef.current;
        pauseStartRef.current = null;
      }
    }
  }, [isPaused]);

  useEffect(() => {
    if (!sessionActiveRef.current || isPaused) return;
    let raf = 0;

    const loop = () => {
      const now = Date.now();
      const pausedNow = pausedAccumRef.current + (pauseStartRef.current ? now - pauseStartRef.current : 0);
      const elapsed = now - startRef.current - pausedNow;
      const leftSec = Math.max(0, Math.ceil((durationMs - elapsed) / 1000));
      setTimerLeft(leftSec);

      // —Ç–∏–∫ –æ–≥–ª—É—à–µ–Ω–∏—è –¥–ª—è UI
      const stunLeftMs = Math.max(0, stunnedUntilRef.current - now);
      setStunLeft(Math.ceil(stunLeftMs / 100) / 10);

      if (elapsed >= durationMs) {
        finishSession(); // –≤—Ä–µ–º—è –≤—ã—à–ª–æ
        return;
      }
      raf = requestAnimationFrame(loop);
    };

    raf = requestAnimationFrame(loop);
    return () => cancelAnimationFrame(raf);
  }, [isPaused, durationMs]);

  const remainingSeconds = () => {
    const now = Date.now();
    const pausedNow = pausedAccumRef.current + (pauseStartRef.current ? now - pauseStartRef.current : 0);
    const elapsed = now - startRef.current - pausedNow;
    return Math.max(0, Math.ceil((durationMs - elapsed) / 1000));
  };

  const triggerStun = (now = Date.now()) => { stunnedUntilRef.current = now + STUN_MS; };

  const resumeRun = () => setPaused(false);
  const exitRun = () => { sessionActiveRef.current = false; router.back(); };

  // –£—á—ë—Ç –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —Å–ª–æ–≤–∞–º (–¥–ª—è SRS –∏ Result)
  const answersRef = useRef<RunSummary['answers']>([]);
  const attemptsForCurrentRef = useRef<number>(0);

  const finishSession = (extraScore = 0) => {
    if (!sessionActiveRef.current) return;
    sessionActiveRef.current = false;
    const finalScore = scoreRef.current.score + extraScore;
    const accuracy = scoreRef.current.total > 0 ? scoreRef.current.correct / scoreRef.current.total : 0;

    const summary: RunSummary = {
      packId: pack.id,
      score: finalScore,
      accuracy,
      errors: Array.from(new Set(scoreRef.current.errors)).map((lexemeId) => ({ lexemeId })),
      durationPlayedSec: effectiveLevel.durationSec - Math.max(0, timerLeft),
      seed: sessionSeed,
      level: effectiveLevel,
      answers: answersRef.current ?? [],
      timeBonus: extraScore > 0 ? extraScore : 0,
      comboMax: comboMaxRef.current,
    };

    router.replace({ pathname: '/result', params: { summary: encodeURIComponent(JSON.stringify(summary)) } });
  };

  // –≠—Ñ—Ñ–µ–∫—Ç—ã UI
  const blinkCard = () => {
    cardOpacity.stopAnimation();
    Animated.sequence([
      Animated.timing(cardOpacity, { toValue: 0.85, duration: 120, useNativeDriver: true }),
      Animated.timing(cardOpacity, { toValue: 1, duration: 120, useNativeDriver: true }),
    ]).start();
  };

  const answerPick = async (laneIndex: 0 | 1) => {
    const now = Date.now();
    if (now < stunnedUntilRef.current) return;
    if (slotIdxRef.current >= plan.slots.length) return;

    const slot = plan.slots[slotIdxRef.current];
    const opt = options?.[laneIndex];
    if (!slot || !opt) return;

    const isCorrect = !!opt.isCorrect;
    setScoreState((st) => applyAnswer(st, isCorrect, slot.lexemeId));
    blinkCard();

    if (isCorrect) {
      setHighlight({ index: laneIndex, correct: true });
      await sfxOk(true);

      // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏ –ø–æ —Å–ª–æ–≤—É (–æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–ª–æ–≤–æ)
      const attempts = attemptsForCurrentRef.current + 1;
      answersRef.current = [
        ...(answersRef.current ?? []),
        {
          lexemeId: slot.lexemeId,
          isCorrect: attempts === 1, // –≤–µ—Ä–Ω–æ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
          attempts,
          usedHint: false,
          timeToAnswerMs: 0, // –≤ MVP –Ω–µ —Å—á–∏—Ç–∞–µ–º —Ç–æ—á–Ω–æ
        },
      ];
      attemptsForCurrentRef.current = 0; // —Å–±—Ä–æ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞

      // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫ —É–≤–∏–¥–µ–ª –∑–µ–ª—ë–Ω—ã–π
      setTimeout(() => {
        setHighlight(null);
        const next = slotIdxRef.current + 1;
        setSlotIdx(next);
        if (next >= plan.slots.length) {
          const bonus = remainingSeconds() * BONUS_PER_SEC;
          finishSession(bonus);
        }
      }, 250);
    } else {
      setHighlight({ index: laneIndex, correct: false });
      await sfxFail(true);
      triggerStun(now);

      // –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —ç—Ç–æ —Å–ª–æ–≤–æ
      attemptsForCurrentRef.current += 1;

      // –ü–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
      setOptions((prev) => {
        const copy = [...prev];
        shuffleInPlace(copy, mulberry32(now)); // —Å–∏–¥–∏–º —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        return copy;
      });

      // –°–Ω—è—Ç–∏–µ –∫—Ä–∞—Å–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —á—É—Ç—å –ø–æ–∑–∂–µ
      setTimeout(() => setHighlight(null), 400);
      // –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —Å–ª–æ–≤–µ
    }
  };

  const slot = plan.slots[Math.min(slotIdx, plan.slots.length - 1)];

  return (
    <ThemedView style={{ flex: 1, padding: 16, gap: 16 }}>
      {/* HUD */}
      <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>
        <ThemedText>Score: {scoreState.score}</ThemedText>
        <ThemedText>Combo: x{scoreState.comboMul.toFixed(1)}</ThemedText>
        <ThemedText>‚è± {timerLeft}s</ThemedText>
        <Pressable
          accessibilityRole="button"
          onPress={() => setPaused(true)}
          style={{ marginLeft: 8, paddingHorizontal: 12, paddingVertical: 8, borderRadius: 12, borderWidth: 1, borderColor: '#ccc' }}
        >
          <ThemedText>‚è∏ –ü–∞—É–∑–∞</ThemedText>
        </Pressable>
      </View>

      {/* –°—Ç–∞—Ç—É—Å */}
      <View style={{ padding: 8, borderRadius: 8, borderWidth: 1, borderColor: '#eee' }}>
        <ThemedText>–°–ª–æ–≤–æ: {Math.min(slotIdx + 1, plan.slots.length)} / {plan.slots.length}</ThemedText>
        {stunnedUntilRef.current > Date.now() && (
          <ThemedText>‚õî –û–≥–ª—É—à–µ–Ω–∏–µ: –µ—â—ë ~{stunLeft.toFixed(1)} c</ThemedText>
        )}
      </View>

      {/* –ö–∞—Ä—Ç–æ—á–∫–∞ */}
      <Animated.View
        style={{
          padding: 16,
          borderRadius: 12,
          borderWidth: 1,
          borderColor: '#ddd',
          alignItems: 'center',
          justifyContent: 'center',
          opacity: cardOpacity,
        }}
      >
        <ThemedText style={{ fontSize: 28, fontWeight: '700' }}>
          {slot.prompt}
        </ThemedText>
        <ThemedText style={{ marginTop: 6, opacity: 0.7 }}>—Ç–∞–ø–Ω–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥</ThemedText>
      </Animated.View>

      {/* –í–∞—Ä–∏–∞–Ω—Ç—ã */}
      <View style={{ flex: 1, flexDirection: 'row', gap: 12, marginTop: 12 }}>
        {options.map((opt, i) => {
          // –Ø–í–ù–ê–Ø –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
          let bgColor = '#FFFFFF';
          if (highlight && highlight.index === i) {
            bgColor = highlight.correct ? '#27ae60' : '#eb5757'; // –∑–µ–ª—ë–Ω—ã–π / –∫—Ä–∞—Å–Ω—ã–π
          }

          return (
            <View
              key={`${slot.index}-${i}-${opt.id}`}
              style={{
                flex: 1,
                borderWidth: 1,
                borderColor: '#ccc',
                borderRadius: 16,
                justifyContent: 'center',
                alignItems: 'center',
                backgroundColor: bgColor,
              }}
            >
              <Pressable
                accessibilityRole="button"
                onPress={() => answerPick(i as 0 | 1)}
                style={{ width: '100%', height: '100%', justifyContent: 'center', alignItems: 'center', paddingHorizontal: 8 }}
              >
                <Text style={{ fontSize: 24, fontWeight: '700', textAlign: 'center' }}>
                  {opt.id}
                </Text>
              </Pressable>
            </View>
          );
        })}
      </View>

      {/* –ó–∞–≤–µ—Ä—à–∏—Ç—å (–æ—Ç–ª–∞–¥–∫–∞) */}
      <Pressable
        accessibilityRole="button"
        onPress={() => finishSession()}
        style={{ padding: 16, borderRadius: 12, backgroundColor: '#27ae60', alignItems: 'center' }}
      >
        <ThemedText style={{ color: 'white' }}>–ó–∞–≤–µ—Ä—à–∏—Ç—å (–¥–µ–º–æ)</ThemedText>
      </Pressable>

      {/* –ü–∞—É–∑–∞ */}
      <Modal transparent visible={isPaused} animationType="fade" onRequestClose={resumeRun}>
        <View style={{ flex: 1, backgroundColor: 'rgba(0,0,0,0.5)', justifyContent: 'center', alignItems: 'center', padding: 24 }}>
          <View style={{ width: '100%', maxWidth: 420, backgroundColor: 'white', borderRadius: 16, padding: 20, gap: 12 }}>
            <Text style={{ fontSize: 20, fontWeight: '600', textAlign: 'center' }}>–ü–∞—É–∑–∞</Text>
            <Text style={{ textAlign: 'center' }}>–ò–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –≤—ã–π—Ç–∏.</Text>
            <Pressable accessibilityRole="button" onPress={resumeRun} style={{ padding: 14, borderRadius: 12, backgroundColor: '#2f80ed', alignItems: 'center' }}>
              <Text style={{ color: 'white', fontWeight: '600' }}>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</Text>
            </Pressable>
            <View style={{ padding: 12, borderRadius: 12, borderWidth: 1, borderColor: '#f2c94c' }}>
              <Text style={{ textAlign: 'center' }}>‚ö†Ô∏è –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–±–µ–≥–∞ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω.</Text>
            </View>
            <Pressable accessibilityRole="button" onPress={exitRun} style={{ padding: 14, borderRadius: 12, backgroundColor: '#eb5757', alignItems: 'center' }}>
              <Text style={{ color: 'white', fontWeight: '700' }}>–í—ã–π—Ç–∏ –∏–∑ –∑–∞–±–µ–≥–∞</Text>
            </Pressable>
          </View>
        </View>
      </Modal>
    </ThemedView>
  );
}
