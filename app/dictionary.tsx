/**
 * –°–ª–æ–≤–∞—Ä—å –ø–∞–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
 * - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
 * - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ (0-5)
 * - –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º
 * - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—é –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
 * - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É, –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É)
 */

import { ThemedText } from '@/components/themed-text';
import { ThemedView } from '@/components/themed-view';
import { getPackById } from '@/lib/content';
import { getPackLexemesWithProgress } from '@/lib/storage';
import { useLocalSearchParams } from 'expo-router';
import { useEffect, useState } from 'react';
import { FlatList, Pressable, Text, TextInput, View } from 'react-native';

type LexemeWithProgress = {
  id: string;
  base: string;
  translation: string;
  mastery: number;
  recentMistakes: string[];
};

type SortMode = 'alphabet' | 'mastery-asc' | 'mastery-desc';
type FilterMode = 'all' | 'learning' | 'mastered';

export default function DictionaryScreen() {
  const { packId } = useLocalSearchParams<{ packId: string }>();
  const pack = getPackById(packId!)!;

  const [lexemes, setLexemes] = useState<LexemeWithProgress[]>([]);
  const [filteredLexemes, setFilteredLexemes] = useState<LexemeWithProgress[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [sortMode, setSortMode] = useState<SortMode>('alphabet');
  const [filterMode, setFilterMode] = useState<FilterMode>('all');

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
   */
  useEffect(() => {
    (async () => {
      const data = await getPackLexemesWithProgress(pack);
      setLexemes(data);
      setFilteredLexemes(data);
    })();
  }, [pack]);

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   */
  useEffect(() => {
    let result = [...lexemes];

    // –ü–æ–∏—Å–∫
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase();
      result = result.filter(
        (lx) =>
          lx.base.toLowerCase().includes(query) || lx.translation.toLowerCase().includes(query)
      );
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É
    if (filterMode === 'learning') {
      result = result.filter((lx) => lx.mastery < 4);
    } else if (filterMode === 'mastered') {
      result = result.filter((lx) => lx.mastery >= 4);
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if (sortMode === 'alphabet') {
      result.sort((a, b) => a.base.localeCompare(b.base));
    } else if (sortMode === 'mastery-asc') {
      result.sort((a, b) => a.mastery - b.mastery);
    } else if (sortMode === 'mastery-desc') {
      result.sort((a, b) => b.mastery - a.mastery);
    }

    setFilteredLexemes(result);
  }, [searchQuery, sortMode, filterMode, lexemes]);

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
   */
  const getMasteryColor = (mastery: number): string => {
    if (mastery === 0) return '#f44336'; // –ö—Ä–∞—Å–Ω—ã–π
    if (mastery === 1) return '#ff9800'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
    if (mastery === 2) return '#ffc107'; // –ñ—ë–ª—Ç—ã–π
    if (mastery === 3) return '#8bc34a'; // –°–∞–ª–∞—Ç–æ–≤—ã–π
    if (mastery === 4) return '#4caf50'; // –ó–µ–ª—ë–Ω—ã–π
    return '#2196f3'; // –°–∏–Ω–∏–π (–º–∞—Å—Ç–µ—Ä)
  };

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
   */
  const renderMasteryIndicator = (mastery: number) => {
    return (
      <View style={{ flexDirection: 'row', gap: 2 }}>
        {Array.from({ length: 5 }, (_, i) => (
          <View
            key={i}
            style={{
              width: 8,
              height: 20,
              borderRadius: 2,
              backgroundColor: i < mastery ? getMasteryColor(mastery) : '#e0e0e0',
            }}
          />
        ))}
      </View>
    );
  };

  const masteredCount = lexemes.filter((lx) => lx.mastery >= 4).length;
  const learningCount = lexemes.filter((lx) => lx.mastery > 0 && lx.mastery < 4).length;
  const notStartedCount = lexemes.filter((lx) => lx.mastery === 0).length;

  return (
    <ThemedView style={{ flex: 1, padding: 16, gap: 16 }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <View>
        <ThemedText type="title">–°–ª–æ–≤–∞—Ä—å</ThemedText>
        <Text style={{ fontSize: 14, color: '#666', marginTop: 4 }}>{pack.title}</Text>
      </View>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <View
        style={{
          flexDirection: 'row',
          gap: 8,
          padding: 12,
          borderRadius: 12,
          backgroundColor: '#f5f5f5',
        }}
      >
        <View style={{ flex: 1, alignItems: 'center', gap: 4 }}>
          <Text style={{ fontSize: 24, fontWeight: '700', color: '#4caf50' }}>{masteredCount}</Text>
          <Text style={{ fontSize: 12, color: '#666' }}>–ò–∑—É—á–µ–Ω–æ</Text>
        </View>
        <View style={{ flex: 1, alignItems: 'center', gap: 4 }}>
          <Text style={{ fontSize: 24, fontWeight: '700', color: '#ff9800' }}>{learningCount}</Text>
          <Text style={{ fontSize: 12, color: '#666' }}>–í –ø—Ä–æ—Ü–µ—Å—Å–µ</Text>
        </View>
        <View style={{ flex: 1, alignItems: 'center', gap: 4 }}>
          <Text style={{ fontSize: 24, fontWeight: '700', color: '#9e9e9e' }}>{notStartedCount}</Text>
          <Text style={{ fontSize: 12, color: '#666' }}>–ù–µ –Ω–∞—á–∞—Ç–æ</Text>
        </View>
      </View>

      {/* –ü–æ–∏—Å–∫ */}
      <TextInput
        placeholder="–ü–æ–∏—Å–∫ —Å–ª–æ–≤–∞..."
        value={searchQuery}
        onChangeText={setSearchQuery}
        style={{
          padding: 12,
          borderRadius: 12,
          borderWidth: 1,
          borderColor: '#ddd',
          backgroundColor: '#fff',
          fontSize: 16,
          color: '#000',
        }}
        placeholderTextColor="#999"
      />

      {/* –§–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
      <View style={{ gap: 8 }}>
        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <View style={{ flexDirection: 'row', gap: 8 }}>
          <Pressable
            onPress={() => setFilterMode('all')}
            style={{
              flex: 1,
              padding: 10,
              borderRadius: 8,
              backgroundColor: filterMode === 'all' ? '#2196f3' : '#f5f5f5',
              alignItems: 'center',
            }}
          >
            <Text style={{ fontSize: 14, fontWeight: '600', color: filterMode === 'all' ? '#fff' : '#000' }}>
              –í—Å–µ
            </Text>
          </Pressable>
          <Pressable
            onPress={() => setFilterMode('learning')}
            style={{
              flex: 1,
              padding: 10,
              borderRadius: 8,
              backgroundColor: filterMode === 'learning' ? '#ff9800' : '#f5f5f5',
              alignItems: 'center',
            }}
          >
            <Text style={{ fontSize: 14, fontWeight: '600', color: filterMode === 'learning' ? '#fff' : '#000' }}>
              –£—á—É
            </Text>
          </Pressable>
          <Pressable
            onPress={() => setFilterMode('mastered')}
            style={{
              flex: 1,
              padding: 10,
              borderRadius: 8,
              backgroundColor: filterMode === 'mastered' ? '#4caf50' : '#f5f5f5',
              alignItems: 'center',
            }}
          >
            <Text style={{ fontSize: 14, fontWeight: '600', color: filterMode === 'mastered' ? '#fff' : '#000' }}>
              –ò–∑—É—á–µ–Ω–æ
            </Text>
          </Pressable>
        </View>

        {/* –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
        <View style={{ flexDirection: 'row', gap: 8 }}>
          <Pressable
            onPress={() => setSortMode('alphabet')}
            style={{
              flex: 1,
              padding: 8,
              borderRadius: 8,
              backgroundColor: sortMode === 'alphabet' ? '#e3f2fd' : '#f5f5f5',
              borderWidth: 1,
              borderColor: sortMode === 'alphabet' ? '#2196f3' : '#ddd',
              alignItems: 'center',
            }}
          >
            <Text style={{ fontSize: 12, color: '#000' }}>–ê-–Ø</Text>
          </Pressable>
          <Pressable
            onPress={() => setSortMode('mastery-asc')}
            style={{
              flex: 1,
              padding: 8,
              borderRadius: 8,
              backgroundColor: sortMode === 'mastery-asc' ? '#e3f2fd' : '#f5f5f5',
              borderWidth: 1,
              borderColor: sortMode === 'mastery-asc' ? '#2196f3' : '#ddd',
              alignItems: 'center',
            }}
          >
            <Text style={{ fontSize: 12, color: '#000' }}>‚Üë –ü—Ä–æ–≥—Ä–µ—Å—Å</Text>
          </Pressable>
          <Pressable
            onPress={() => setSortMode('mastery-desc')}
            style={{
              flex: 1,
              padding: 8,
              borderRadius: 8,
              backgroundColor: sortMode === 'mastery-desc' ? '#e3f2fd' : '#f5f5f5',
              borderWidth: 1,
              borderColor: sortMode === 'mastery-desc' ? '#2196f3' : '#ddd',
              alignItems: 'center',
            }}
          >
            <Text style={{ fontSize: 12, color: '#000' }}>‚Üì –ü—Ä–æ–≥—Ä–µ—Å—Å</Text>
          </Pressable>
        </View>
      </View>

      {/* –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ */}
      <FlatList
        data={filteredLexemes}
        keyExtractor={(item) => item.id}
        ItemSeparatorComponent={() => <View style={{ height: 8 }} />}
        ListEmptyComponent={
          <View style={{ padding: 32, alignItems: 'center' }}>
            <Text style={{ fontSize: 48 }}>üîç</Text>
            <Text style={{ fontSize: 16, color: '#666', marginTop: 8 }}>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</Text>
          </View>
        }
        renderItem={({ item }) => (
          <View
            style={{
              padding: 12,
              borderRadius: 12,
              backgroundColor: '#fff',
              borderWidth: 1,
              borderColor: item.mastery >= 4 ? '#4caf50' : '#ddd',
              gap: 8,
            }}
          >
            {/* –°–ª–æ–≤–æ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
            <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>
              <Text style={{ fontSize: 18, fontWeight: '600', color: '#000', flex: 1 }}>
                {item.base}
              </Text>
              {renderMasteryIndicator(item.mastery)}
            </View>

            {/* –ü–µ—Ä–µ–≤–æ–¥ */}
            <Text style={{ fontSize: 16, color: '#000' }}>{item.translation}</Text>

            {/* –ù–µ–¥–∞–≤–Ω–∏–µ –æ—à–∏–±–∫–∏ */}
            {item.recentMistakes.length > 0 && (
              <View style={{ flexDirection: 'row', alignItems: 'center', gap: 4, marginTop: 4 }}>
                <Text style={{ fontSize: 12, color: '#f44336' }}>
                  ‚ùå –û—à–∏–±–æ–∫: {item.recentMistakes.length}
                </Text>
              </View>
            )}

            {/* –°—Ç–∞—Ç—É—Å –∏–∑—É—á–µ–Ω–∏—è */}
            {item.mastery >= 4 && (
              <View
                style={{
                  alignSelf: 'flex-start',
                  paddingHorizontal: 8,
                  paddingVertical: 4,
                  borderRadius: 8,
                  backgroundColor: '#e8f5e9',
                }}
              >
                <Text style={{ fontSize: 10, fontWeight: '600', color: '#2e7d32' }}>‚úì –ò–ó–£–ß–ï–ù–û</Text>
              </View>
            )}
          </View>
        )}
      />
    </ThemedView>
  );
}
