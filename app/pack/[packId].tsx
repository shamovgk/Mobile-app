/**
 * –≠–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
 */

import { ThemedText } from '@/components/themed-text';
import { ThemedView } from '@/components/themed-view';
import { getPackById } from '@/lib/content';
import { getLevelProgress, isLevelUnlocked } from '@/lib/storage';
import type { LevelProgress } from '@/lib/types';
import { Link, useLocalSearchParams, useRouter } from 'expo-router';
import { useEffect, useState } from 'react';
import { Pressable, ScrollView, Text, View } from 'react-native';

export default function PackDetailsScreen() {
  const { packId } = useLocalSearchParams<{ packId: string }>();
  const router = useRouter();
  const pack = getPackById(packId!)!;

  const [levelProgressMap, setLevelProgressMap] = useState<Record<string, LevelProgress>>({});

  useEffect(() => {
    (async () => {
      const map: Record<string, LevelProgress> = {};
      for (const level of pack.levels) {
        map[level.id] = await getLevelProgress(pack.id, level.id);
      }
      setLevelProgressMap(map);
    })();
  }, [pack]);

  const totalLevels = pack.levels.length;
  const completedLevels = Object.values(levelProgressMap).filter((p) => p?.completed).length;
  const packProgress = totalLevels > 0 ? (completedLevels / totalLevels) * 100 : 0;
  const isPackCompleted = completedLevels === totalLevels && totalLevels > 0;

  const getBorderColor = (stars: number): string => {
    if (stars === 3) return '#FFD700';
    if (stars === 2) return '#C0C0C0';
    if (stars === 1) return '#CD7F32';
    return '#ddd';
  };

  const getBackgroundColor = (stars: number, unlocked: boolean): string => {
    if (!unlocked) return '#f5f5f5';
    if (stars === 3) return '#fffef5';
    if (stars === 2) return '#fafafa';
    if (stars === 1) return '#fff9f0';
    return '#fff';
  };

  const getDifficultyEmoji = (mode: string): string => {
    if (mode === 'hard') return 'üî•';
    if (mode === 'easy') return 'üå±';
    return '‚ö°';
  };

  return (
    <ThemedView style={{ flex: 1 }}>
      <ScrollView contentContainerStyle={{ padding: 16, gap: 16 }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <View>
          <ThemedText type="title">{pack.title}</ThemedText>
          <Text style={{ marginTop: 4, fontSize: 14, color: '#666' }}>
            CEFR: {pack.cefr} ‚Ä¢ –°–ª–æ–≤: {pack.lexemes.length}
          </Text>
        </View>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–∞–∫–∞ */}
        <View
          style={{
            padding: 16,
            borderRadius: 12,
            backgroundColor: isPackCompleted ? '#fffbea' : '#f5f5f5',
            borderWidth: 2,
            borderColor: isPackCompleted ? '#FFD700' : '#ddd',
            gap: 8,
          }}
        >
          <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>
            <Text style={{ fontSize: 16, fontWeight: '600', color: '#000' }}>
              {isPackCompleted ? 'üèÜ –ü–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω!' : '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–∞–∫–∞'}
            </Text>
            <Text style={{ fontSize: 16, fontWeight: '600', color: '#000' }}>
              {completedLevels}/{totalLevels}
            </Text>
          </View>

          <View style={{ height: 12, backgroundColor: '#eee', borderRadius: 6, overflow: 'hidden' }}>
            <View
              style={{
                height: '100%',
                width: `${packProgress}%`,
                backgroundColor: isPackCompleted ? '#FFD700' : '#2196f3',
                borderRadius: 6,
              }}
            />
          </View>

          <Text style={{ fontSize: 12, color: '#666' }}>
            {isPackCompleted
              ? 'üéâ –í—Å–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã –Ω–∞ 3 –∑–≤–µ–∑–¥—ã!'
              : '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞ 3‚òÖ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã'}
          </Text>
        </View>

        <Text style={{ fontSize: 20, fontWeight: 'bold', color: '#000' }}>–ö–∞—Ä—Ç–∞ —É—Ä–æ–≤–Ω–µ–π</Text>

        {/* –ö–∞—Ä—Ç–∞ —É—Ä–æ–≤–Ω–µ–π */}
        <View style={{ gap: 0 }}>
          {pack.levels.map((level, index) => {
            const progress = levelProgressMap[level.id];
            const stars = progress?.stars ?? 0;
            const unlocked = isLevelUnlocked(pack, level, levelProgressMap);
            const borderColor = unlocked ? getBorderColor(stars) : '#ccc';
            const backgroundColor = getBackgroundColor(stars, unlocked);
            const isNew = unlocked && progress?.attempts === 0;
            const isLastLevel = index === pack.levels.length - 1;

            return (
              <View key={level.id}>
                <Pressable
                  disabled={!unlocked}
                  onPress={() => {
                    if (unlocked) {
                      const levelStr = encodeURIComponent(JSON.stringify(level.config));
                      router.push({
                        pathname: '/run',
                        params: {
                          packId: pack.id,
                          levelId: level.id,
                          level: levelStr,
                          seed: `${pack.id}-${level.id}-${Date.now()}`,
                          mode: 'normal',
                          distractorMode: level.distractorMode,
                        },
                      });
                    }
                  }}
                  style={{
                    padding: 16,
                    borderRadius: 12,
                    borderWidth: 2,
                    borderColor,
                    backgroundColor,
                    opacity: unlocked ? 1 : 0.5,
                    gap: 10,
                  }}
                >
                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–≤–Ω—è */}
                  <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>
                    <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8 }}>
                      <View
                        style={{
                          width: 36,
                          height: 36,
                          borderRadius: 18,
                          backgroundColor: unlocked ? borderColor : '#ccc',
                          justifyContent: 'center',
                          alignItems: 'center',
                        }}
                      >
                        <Text style={{ fontSize: 16, fontWeight: '700', color: stars > 0 ? '#000' : '#fff' }}>
                          {level.order}
                        </Text>
                      </View>
                      <Text style={{ fontSize: 16, fontWeight: '600', color: '#000', flex: 1 }}>
                        {level.title}
                      </Text>
                    </View>

                    {!unlocked ? (
                      <Text style={{ fontSize: 24 }}>üîí</Text>
                    ) : isNew ? (
                      <View
                        style={{
                          backgroundColor: '#4caf50',
                          paddingHorizontal: 8,
                          paddingVertical: 4,
                          borderRadius: 8,
                        }}
                      >
                        <Text style={{ color: 'white', fontSize: 10, fontWeight: '700' }}>NEW</Text>
                      </View>
                    ) : null}
                  </View>

                  {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                  <Text style={{ fontSize: 14, color: '#666', marginLeft: 44 }}>{level.description}</Text>

                  {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã */}
                  <View style={{ flexDirection: 'row', gap: 12, flexWrap: 'wrap', marginLeft: 44 }}>
                    <View style={{ flexDirection: 'row', alignItems: 'center', gap: 4 }}>
                      <Text style={{ fontSize: 14 }}>‚è±Ô∏è</Text>
                      <Text style={{ fontSize: 12, color: '#000' }}>{level.config.durationSec}—Å</Text>
                    </View>
                    <View style={{ flexDirection: 'row', alignItems: 'center', gap: 4 }}>
                      <Text style={{ fontSize: 14 }}>‚ù§Ô∏è</Text>
                      <Text style={{ fontSize: 12, color: '#000' }}>{level.config.lives}</Text>
                    </View>
                    <View style={{ flexDirection: 'row', alignItems: 'center', gap: 4 }}>
                      <Text style={{ fontSize: 14 }}>üéØ</Text>
                      <Text style={{ fontSize: 12, color: '#000' }}>{level.config.lanes} –≤–∞—Ä–∏–∞–Ω—Ç–∞</Text>
                    </View>
                    <View style={{ flexDirection: 'row', alignItems: 'center', gap: 4 }}>
                      <Text style={{ fontSize: 14 }}>{getDifficultyEmoji(level.distractorMode)}</Text>
                      <Text style={{ fontSize: 12, color: '#000' }}>
                        {level.distractorMode === 'hard'
                          ? '–°–ª–æ–∂–Ω–æ'
                          : level.distractorMode === 'easy'
                          ? '–õ–µ–≥–∫–æ'
                          : '–ù–æ—Ä–º–∞–ª—å–Ω–æ'}
                      </Text>
                    </View>
                  </View>

                  {/* –ó–≤—ë–∑–¥—ã */}
                  {unlocked && (
                    <View style={{ gap: 6, marginLeft: 44 }}>
                      <View style={{ flexDirection: 'row', gap: 4 }}>
                        {Array.from({ length: 3 }, (_, i) => (
                          <Text key={i} style={{ fontSize: 28, color: i < stars ? '#FFD700' : '#ddd' }}>
                            ‚òÖ
                          </Text>
                        ))}
                      </View>

                      {progress && progress.attempts > 0 && (
                        <View style={{ gap: 2 }}>
                          <Text style={{ fontSize: 12, color: '#000' }}>
                            üèÜ –†–µ–∫–æ—Ä–¥: {progress.bestScore} –æ—á–∫–æ–≤ ({Math.round(progress.bestAccuracy * 100)}%)
                          </Text>
                          <Text style={{ fontSize: 12, color: '#666' }}>–ü–æ–ø—ã—Ç–æ–∫: {progress.attempts}</Text>
                        </View>
                      )}
                    </View>
                  )}

                  {/* –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ */}
                  {!unlocked && level.unlockRequirement.previousLevel && (
                    <View
                      style={{
                        padding: 8,
                        borderRadius: 8,
                        backgroundColor: '#fff3cd',
                        borderWidth: 1,
                        borderColor: '#ffc107',
                        marginLeft: 44,
                      }}
                    >
                      <Text style={{ fontSize: 12, color: '#856404' }}>
                        ‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç–µ {level.unlockRequirement.minStars}‚òÖ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —É—Ä–æ–≤–Ω–µ
                      </Text>
                    </View>
                  )}
                </Pressable>

                {/* –õ–∏–Ω–∏—è –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ */}
                {!isLastLevel && (
                  <View
                    style={{
                      marginLeft: 33,
                      width: 4,
                      height: 16,
                      backgroundColor: unlocked ? borderColor : '#ddd',
                      opacity: 0.5,
                    }}
                  />
                )}
              </View>
            );
          })}
        </View>

        {/* –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É */}
        <View style={{ gap: 12, marginTop: 8 }}>
          <Link href={{ pathname: '/dictionary', params: { packId: pack.id } }} asChild>
            <Pressable
              style={{
                padding: 14,
                borderRadius: 12,
                backgroundColor: '#2196f3', // ‚Üê –°–∏–Ω–∏–π —Ñ–æ–Ω –≤–º–µ—Å—Ç–æ –±–µ–ª–æ–≥–æ
                alignItems: 'center',
              }}
            >
              <Text style={{ fontSize: 16, color: '#fff', fontWeight: '600' }}>
                üìñ –°–ª–æ–≤–∞—Ä—å –ø–∞–∫–∞ ({pack.lexemes.length} —Å–ª–æ–≤)
              </Text>
            </Pressable>
          </Link>

          <Link href="/" asChild>
            <Pressable
              style={{
                padding: 14,
                borderRadius: 12,
                borderWidth: 1,
                borderColor: '#ccc',
                alignItems: 'center',
                backgroundColor: '#fff', // ‚Üê –ë–µ–ª—ã–π —Ñ–æ–Ω —Å –≥—Ä–∞–Ω–∏—Ü–µ–π
              }}
            >
              <Text style={{ fontSize: 16, color: '#000' }}>‚Üê –ù–∞–∑–∞–¥ –∫ –ø–∞–∫–∞–º</Text>
            </Pressable>
          </Link>
        </View>
      </ScrollView>
    </ThemedView>
  );
}
