import { ThemedText } from '@/components/themed-text';
import { ThemedView } from '@/components/themed-view';
import { getPackById } from '@/lib/content';
import { applySessionSummary } from '@/lib/storage';
import type { RunSummary } from '@/lib/types';
import { useLocalSearchParams, useRouter } from 'expo-router';
import { useEffect, useMemo, useState } from 'react';
import { FlatList, Pressable, View } from 'react-native';

export default function ResultScreen() {
  const { summary } = useLocalSearchParams<{ summary?: string }>();
  const router = useRouter();
  const [saved, setSaved] = useState(false);
  const [saveError, setSaveError] = useState<string | null>(null);

  let data: RunSummary | null = null;
  try {
    data = summary ? (JSON.parse(decodeURIComponent(summary)) as RunSummary) : null;
  } catch {
    data = null;
  }

  const packId = data?.packId ?? 'pack-basic-1';
  const pack = getPackById(packId)!;
  const levelStr = data ? encodeURIComponent(JSON.stringify(data.level)) : undefined;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å/–∏—Å—Ç–æ—Ä–∏—é –æ–¥–∏–Ω —Ä–∞–∑
  useEffect(() => {
    let mounted = true;
    (async () => {
      if (data && !saved) {
        try {
          await applySessionSummary(pack, data);
          if (mounted) { setSaved(true); setSaveError(null); }
        } catch (e: any) {
          if (mounted) { setSaved(false); setSaveError(String(e?.message ?? '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')); }
        }
      }
    })();
    return () => { mounted = false; };
  }, [data, pack, saved]);

  // –ú—ç–ø –æ—à–∏–±–æ–∫ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫: —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ lexemeId + attempts –∏–∑ answers (–º–∞–∫—Å –ø–æ —Å–ª–æ–≤—É)
  const errorItems = useMemo(() => {
    if (!data) return [];
    const errorSet = new Set((data.errors ?? []).map(e => e.lexemeId));
    const attemptsMap = new Map<string, number>();
    if (data.answers && data.answers.length > 0) {
      for (const a of data.answers) {
        const prev = attemptsMap.get(a.lexemeId) ?? 0;
        attemptsMap.set(a.lexemeId, Math.max(prev, a.attempts));
      }
    }
    return Array.from(errorSet).map(lexemeId => {
      const lx = pack.lexemes.find(l => l.id === lexemeId);
      return {
        lexemeId,
        base: lx?.base ?? lexemeId,
        translation: lx?.translations?.[0] ?? '‚Äî',
        example: lx?.examples?.[0] ?? '',
        attempts: attemptsMap.get(lexemeId) ?? 1,
      };
    });
  }, [data, pack]);

  // repeatSet ‚Äî —Å–ø–∏—Å–æ–∫ lexemeId –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
  const repeatSet = useMemo(() => errorItems.map(i => i.lexemeId), [errorItems]);
  const repeatParam = repeatSet.length > 0 ? encodeURIComponent(JSON.stringify(repeatSet)) : undefined;

  const accuracyPct = Math.round((data?.accuracy ?? 0) * 100);

  return (
    <ThemedView style={{ flex: 1, gap: 16, padding: 16 }}>
      <ThemedText type="title">–ò—Ç–æ–≥–∏</ThemedText>

      <View style={{ gap: 4 }}>
        <ThemedText>–û—á–∫–∏: {data?.score ?? 0}</ThemedText>
        <ThemedText>–¢–æ—á–Ω–æ—Å—Ç—å: {accuracyPct}%</ThemedText>
        <ThemedText>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {Math.max(0, Math.round(data?.durationPlayedSec ?? 0))} c</ThemedText>
        {!!data?.timeBonus && data.timeBonus > 0 && (
          <ThemedText>–ë–æ–Ω—É—Å –∑–∞ —Ä–∞–Ω–Ω–∏–π —Ñ–∏–Ω–∏—à: +{data.timeBonus}</ThemedText>
        )}
        <ThemedText>{saved ? '–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –æ—Ñ–ª–∞–π–Ω' : (saveError ? `–ù–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏: ${saveError}` : '–°–æ—Ö—Ä–∞–Ω—è–µ–º...')}</ThemedText>
      </View>

      {/* –û—à–∏–±–∫–∏ */}
      <View style={{ gap: 8 }}>
        <ThemedText type="defaultSemiBold">–û—à–∏–±–∫–∏</ThemedText>
        {errorItems.length === 0 ? (
          <ThemedText>–í —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫ üéâ</ThemedText>
        ) : (
          <FlatList
            data={errorItems}
            keyExtractor={(i) => i.lexemeId}
            ItemSeparatorComponent={() => <View style={{ height: 8 }} />}
            renderItem={({ item }) => (
              <View style={{ padding: 12, borderRadius: 12, borderWidth: 1, borderColor: '#ddd', gap: 4 }}>
                <ThemedText type="defaultSemiBold">{item.base}</ThemedText>
                <ThemedText>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {item.translation}</ThemedText>
                {!!item.example && <ThemedText style={{ opacity: 0.8 }}>–ü—Ä–∏–º–µ—Ä: {item.example}</ThemedText>}
                {item.attempts > 1 && <ThemedText>–ü–æ–ø—ã—Ç–æ–∫: {item.attempts}</ThemedText>}
              </View>
            )}
          />
        )}
      </View>

      <View style={{ gap: 8 }}>
        {/* –ë—ã—Å—Ç—Ä—ã–π –ø–æ–≤—Ç–æ—Ä / –ü–æ—Ö–æ–∂–µ–µ –ø–æ—Å–ª–æ–∂–Ω–µ–µ */}
        {repeatSet.length > 0 ? (
          <Pressable
            accessibilityRole="button"
            onPress={() =>
              router.push({
                pathname: '/run',
                params: {
                  packId,
                  level: levelStr!,
                  seed: `${packId}-review-${Date.now()}`,
                  mode: 'review',
                  repeat: repeatParam!,
                },
              })
            }
            style={{ padding: 16, borderRadius: 12, backgroundColor: '#f2994a', alignItems: 'center' }}
          >
            <ThemedText style={{ color: 'white' }}>–ë—ã—Å—Ç—Ä—ã–π –ø–æ–≤—Ç–æ—Ä (–æ—à–∏–±–∫–∏)</ThemedText>
          </Pressable>
        ) : (
          <Pressable
            accessibilityRole="button"
            onPress={() =>
              router.push({
                pathname: '/run',
                params: {
                  packId,
                  level: levelStr!,
                  seed: `${packId}-harder-${Date.now()}`,
                  mode: 'review',
                  // –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –±–µ—Ä—ë–º —Å–ª–æ–≤–∞ —Å –Ω–∏–∑–∫–∏–º –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ–º (—ç–º—É–ª—è—Ü–∏—è ‚Äî –ø—É—Å—Ç–æ–π repeat, run —Å–∞–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—ã—á–Ω—ã–π –ø–ª–∞–Ω)
                },
              })
            }
            style={{ padding: 16, borderRadius: 12, backgroundColor: '#6c5ce7', alignItems: 'center' }}
          >
            <ThemedText style={{ color: 'white' }}>–ü–æ—Ö–æ–∂–µ–µ –ø–æ—Å–ª–æ–∂–Ω–µ–µ</ThemedText>
          </Pressable>
        )}

        <Pressable
          accessibilityRole="button"
          onPress={() =>
            router.push({
              pathname: '/run',
              params: {
                packId,
                level: levelStr!,
                seed: `${packId}-seed-retry-${Date.now()}`,
                mode: 'normal',
              },
            })
          }
          style={{ padding: 16, borderRadius: 12, backgroundColor: '#2f80ed', alignItems: 'center' }}
        >
          <ThemedText style={{ color: 'white' }}>–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞</ThemedText>
        </Pressable>

        <Pressable
          accessibilityRole="button"
          onPress={() => router.push({ pathname: '/pack/[packId]', params: { packId } })}
          style={{ padding: 16, borderRadius: 12, borderWidth: 1, borderColor: '#ccc', alignItems: 'center' }}
        >
          <ThemedText>–ö –ø–∞–∫—É</ThemedText>
        </Pressable>

        {saveError && (
          <Pressable
            accessibilityRole="button"
            onPress={async () => {
              try {
                if (data) await applySessionSummary(pack, data);
                setSaveError(null);
                setSaved(true);
              } catch (e: any) {
                setSaveError(String(e?.message ?? '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'));
                setSaved(false);
              }
            }}
            style={{ padding: 12, borderRadius: 10, borderWidth: 1, borderColor: '#f2c94c', alignItems: 'center' }}
          >
            <ThemedText>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ</ThemedText>
          </Pressable>
        )}
      </View>
    </ThemedView>
  );
}
